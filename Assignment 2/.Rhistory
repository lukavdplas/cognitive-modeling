melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1") +
xlab("image") +
ylab("image")
plot
}
plot_rdm(subject_cors[[1]])
subject_cors[[1]]
subject_data[[1]]
subject_sims[[1]]
make_rdm(subject_sims[[1]])
og_cor <- make_rdm(neural_responses)
subject_cors <- list()
for (i in 1:12) {
subject_cors[[i]] <- make_rdm(subject_sims[[i]])
}
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1") +
xlab("image") +
ylab("image")
plot
}
make_rdm(subject_cors[[1]])
plot_rdm(subject_cors[[1]])
plot_rdm(subject_cors[[2]])
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity", space = (0,1.25)) +
xlab("image") +
ylab("image")
plot
}
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity") +
xlab("image") +
ylab("image")
plot
}
plot_rdm(subject_cors[[1]])
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity") +
xlab("image") +
ylab("image") +
theme_minimal()
plot
}
plot_rdm(subject_cos[[1]])
plot_rdm(subject_cors[[1]])
plot_rdm(og_cor)
subject <- subject_sims[[1]]
View(subject)
View(subject)
View(driftdata)
library(ggplot2)
library(reshape2)
#import fMRI data
neural_responses <- read.table("./data/NeuralResponses")
simulate_subject <- function(neural_data) {
subject_table <- neural_data
for (i in 1:nrow(neural_data)) {
subject_table[i,] <- subject_table[i,] + rnorm(ncol(subject_table), mean = 0, sd = 1)
}
subject_table
}
subject_sims <- list()
for (i in 1:12) {
subject_sims[[i]] <- simulate_subject(neural_responses)
}
make_rdm <- function(data) {
cor_matrix <- 1 - cor(t(data))
cor_matrix
}
og_cor <- make_rdm(neural_responses)
subject_cors <- list()
for (i in 1:12) {
subject_cors[[i]] <- make_rdm(subject_sims[[i]])
}
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity") +
xlab("image") +
ylab("image") +
theme_minimal()
plot
}
plot_rdm(subject_cors[[1]])
sum(subject_cors)
Reduce(+, subject_cors)
Reduce('+', subject_cors)
mean_rdm <- Reduce('+', subject_cors) / 12
mean_rdm
plot_rdm(mean_rdm)
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity", breaks = c(0.0, 0.25, 0.5, 0.75, 1, 1.25)) +
xlab("image") +
ylab("image") +
theme_minimal()
plot
}
plot_rdm(mean_rdm)
plot_rdm(og_cor)
plot_rdm(subject_cors[[1]])
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity", limit = c(0, 1.25)) +
xlab("image") +
ylab("image") +
theme_minimal()
plot
}
mean_plot <- plot_rdm(mean_rdm)
og_pot <- plot_rdm(og_cor)
subject_plot <- plot_rdm(subject_cors[[1]])
subject_plot
max(subject_cors[[1]])
plot_rdm <- function(rdm_data) {
melted_data <- melt(rdm_data)
plot <- ggplot(data = melted_data, aes(Var2, Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "darkslategray", high = "darkseagreen1", name = "Dissimilarity", limit = c(0, 1.5)) +
xlab("image") +
ylab("image") +
theme_minimal()
plot
}
mean_plot <- plot_rdm(mean_rdm)
og_pot <- plot_rdm(og_cor)
subject_plot <- plot_rdm(subject_cors[[1]])
subject_plot
og_plot
og_plot <- plot_rdm(og_cor)
og_plot
mean_plot
category_vectors <- read.table("./data/CategoryVectors")
category_labels <- read.table("./data/CategoryLabels")
category_labels
category_vectors[1,]
category_vectors[,1]
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
matrix[i,j] <- cat_vector[i] == cat_vector[j]
}
}
}
category_rdm(category_vectors[,1])
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
matrix[i,j] <- is.identical(cat_vector[i], cat_vector[j])
}
}
}
category_rdm(category_vectors[,1])
category_vectors[,1]
category_vectors[,1][2]
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
rdm[i,j] <- cat_vector[i] == cat_vector[j]
}
}
rdm
}
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] != cat_vector[j])
}
}
rdm
}
category_rdm(category_vectors[,1])
v <- category_vectors[,1]
as.numeric(v[i] != v[j])
as.numeric(v[1] != v[1])
as.numeric(v[1] != v[2])
as.numeric(v[1] != v[80])
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] != cat_vector[j])
}
}
rdm
}
ex_rdm <- category_rdm(category_vectors[,1])
ex_rdm
category_vectors <- read.table("./data/CategoryVectors")
category_labels <- read.table("./data/CategoryLabels")
category_rdm <- function(cat_vector) {
rdm <- matrix(NA, nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] != cat_vector[j])
}
}
rdm
}
ex_rdm <- category_rdm(category_vectors[,1])
ex_rdm
category_rdm <- function(cat_vector) {
rdm <- matrix(6, nrow = length(cat_vector), ncol = length(cat_vector))
for (i in length(cat_vector)) {
for(j in length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] != cat_vector[j])
}
}
rdm
}
ex_rdm <- category_rdm(category_vectors[,1])
ex_rdm
category_rdm <- function(cat_vector) {
rdm <- matrix(6, nrow = length(cat_vector), ncol = length(cat_vector))
for (i in 1:length(cat_vector)) {
for(j in 1:length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] != cat_vector[j])
}
}
rdm
}
ex_rdm <- category_rdm(category_vectors[,1])
ex_rdm
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in 1:length(cat_vector)) {
for(j in 1:length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] != cat_vector[j])
}
}
rdm
}
ex_rdm <- category_rdm(category_vectors[,1])
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in 1:length(cat_vector)) {
for(j in 1:length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] == cat_vector[j])
}
}
rdm
}
ex_rdm <- category_rdm(category_vectors[,1])
ex_rdm
animacy_rdm <- category_rdm_for_index[1]
same_animacy <- c()
diff_animacy <- c()
for (i in nrow(animacy_rdm)) {
for (j in ncol(animacy_rdm)) {
if (animacy_rdm[i,j] == 0) {
same_animacy <- c(same_animacy, c(og_cor[i,j]))
}
else {
diff_animacy <- c(diff_animacy, c(og_cor[i,j]))
}
}
}
animacy_rdm <- category_rdm_for_index[1]
same_animacy <- c()
diff_animacy <- c()
for (i in nrow(animacy_rdm)) {
for (j in ncol(animacy_rdm)) {
if (animacy_rdm[i,j] == 0) {
same_animacy <- c(same_animacy, c(og_cor[i,j]))
}
else {
diff_animacy <- c(diff_animacy, c(og_cor[i,j]))
}
}
}
animacy_rdm
animacy_rdm <- category_rdm_for_index(1)
same_animacy <- c()
diff_animacy <- c()
for (i in 1:nrow(animacy_rdm)) {
for (j in 1:ncol(animacy_rdm)) {
if (animacy_rdm[i,j] == 0) {
same_animacy <- c(same_animacy, c(og_cor[i,j]))
}
else {
diff_animacy <- c(diff_animacy, c(og_cor[i,j]))
}
}
}
category_rdm <- function(cat_vector) {
rdm <- matrix(nrow = length(cat_vector), ncol = length(cat_vector))
for (i in 1:length(cat_vector)) {
for(j in 1:length(cat_vector)) {
rdm[i,j] <- as.numeric(cat_vector[i] == cat_vector[j])
}
}
rdm
}
category_rdm_for_index <- function(index) {
category_rdm(category_vectors[,index])
}
#compare same vs different animacy
animacy_rdm <- category_rdm_for_index(1)
same_animacy <- c()
diff_animacy <- c()
for (i in 1:nrow(animacy_rdm)) {
for (j in 1:ncol(animacy_rdm)) {
if (animacy_rdm[i,j] == 0) {
same_animacy <- c(same_animacy, c(og_cor[i,j]))
}
else {
diff_animacy <- c(diff_animacy, c(og_cor[i,j]))
}
}
}
same_animacy
mean(same_animacy)
length(same_animacy)
mean(diff_animacy)
length(diff_animacy)
t.test(same_animacy, diff_animacy, alternative = "two.sided", paired = FALSE)
animacy_rdm <- category_rdm_for_index(1)
same_animacy <- c()
diff_animacy <- c()
for (i in 1:nrow(animacy_rdm)) {
for (j in 1:ncol(animacy_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
if (animacy_rdm[i,j] == 0) {
same_animacy <- c(same_animacy, c(og_cor[i,j]))
}
else {
diff_animacy <- c(diff_animacy, c(og_cor[i,j]))
}
}
}
}
#perform t-test
t.test(same_animacy, diff_animacy, alternative = "two.sided", paired = FALSE)
length(same_animacy)
length(diff_animacy)
sd(same_animacy)
mean(same_animacy)
sd(diff_animacy)
mean(diff_animacy)
animacy_rdm <- category_rdm_for_index(1)
same_animacy <- c()
diff_animacy <- c()
for (i in 1:nrow(animacy_rdm)) {
for (j in 1:ncol(animacy_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
if (animacy_rdm[i,j] == 1) {
same_animacy <- c(same_animacy, c(og_cor[i,j]))
}
else {
diff_animacy <- c(diff_animacy, c(og_cor[i,j]))
}
}
}
}
#perform t-test
t.test(same_animacy, diff_animacy, alternative = "two.sided", paired = FALSE)
mean(same_animacy)
sd(same_animacy)
category_labels
compare_category <- function(cat_index) {
cat_rdm <- category_rdm_for_index(cat_index)
same_cat <- c()
diff_cat <- c()
for (i in 1:nrow(cat_rdm)) {
for (j in 1:ncol(cat_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
if (cat_rdm[i,j] == 1) {
same_cat <- c(same_cat, c(og_cor[i,j]))
}
else {
diff_cat <- c(diff_cat, c(og_cor[i,j]))
}
}
}
}
#perform t-test
t.test(same_animacy, diff_animacy, alternative = "two.sided", paired = FALSE)
}
compare_category(1)
category_labels
compare_category(6)
compare_category(1, subject_cors[[1]])
compare_category <- function(cat_index, correlations) {
cat_rdm <- category_rdm_for_index(cat_index)
same_cat <- c()
diff_cat <- c()
for (i in 1:nrow(cat_rdm)) {
for (j in 1:ncol(cat_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
if (cat_rdm[i,j] == 1) {
same_cat <- c(same_cat, c(correlations[i,j]))
}
else {
diff_cat <- c(diff_cat, c(correlations[i,j]))
}
}
}
}
#perform t-test
t.test(same_animacy, diff_animacy, alternative = "two.sided", paired = FALSE)
}
compare_category(1, og_cor)
compare_category(1, subject_cors[[1]])
compare_category <- function(cat_index, correlations) {
cat_rdm <- category_rdm_for_index(cat_index)
same_cat <- c()
diff_cat <- c()
for (i in 1:nrow(cat_rdm)) {
for (j in 1:ncol(cat_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
if (cat_rdm[i,j] == 1) {
same_cat <- c(same_cat, c(correlations[i,j]))
}
else {
diff_cat <- c(diff_cat, c(correlations[i,j]))
}
}
}
}
#perform t-test
t.test(same_animacy, diff_animacy, alternative = "two.sided", paired = FALSE)
}
compare_category(1, og_cor)
compare_category(1, subject_cors[[1]])
compare_category(6, og_cor)
compare_category <- function(cat_index, correlations) {
cat_rdm <- category_rdm_for_index(cat_index)
same_cat <- c()
diff_cat <- c()
for (i in 1:nrow(cat_rdm)) {
for (j in 1:ncol(cat_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
if (cat_rdm[i,j] == 1) {
same_cat <- c(same_cat, c(correlations[i,j]))
}
else {
diff_cat <- c(diff_cat, c(correlations[i,j]))
}
}
}
}
#perform t-test
t.test(same_cat, diff_cat, alternative = "two.sided", paired = FALSE)
}
compare_category(1, og_cor)
compare_category(1, subject_cors[[1]])
compare_category(6, og_cor)
compare_category(1, mean_rdm) #mean of subject data, animacy
compare_category(1, subject_cors[[1]]) #subject data, animacy
compare_category(1, mean_rdm) #mean of subject data, animacy
compare_category(6, og_cor) #original data, faces
category_vectors
compare_category <- function(cat_index, correlations, filter = 0) {
cat_rdm <- category_rdm_for_index(cat_index)
same_cat <- c()
diff_cat <- c()
for (i in 1:nrow(cat_rdm)) {
for (j in 1:ncol(cat_rdm)) {
if (i < j) { #remove i == j and make sure that i,j and j,i are not both included
include <- TRUE
if (filter > 0) {
if (category_vectors[i,filter] == 0 | category_vectors[j,filter] == 0) {
include <- FALSE
}
}
if (include) {
if (cat_rdm[i,j] == 1) {
same_cat <- c(same_cat, c(correlations[i,j]))
}
else {
diff_cat <- c(diff_cat, c(correlations[i,j]))
}
}
}
}
}
#perform t-test
t.test(same_cat, diff_cat, alternative = "two.sided", paired = FALSE)
}
compare_category(1, og_cor) #original data, animacy
compare_category(1, subject_cors[[1]]) #subject data, animacy
compare_category(1, mean_rdm) #mean of subject data, animacy
compare_category(6, og_cor) #original data, faces
compare_category(6, og_cor, filter = 1) #original data, faces, filter on animacy
category_labels
compare_category(3, og_cor) #original data, faces
compare_category(3, og_cor, filter = 1) #original data, faces, filter on animacy
